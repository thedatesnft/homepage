const Web3Modal=window.Web3Modal.default;let web3,web3Infura,web3Modal,provider,selectedAccount,accountBalance=0,isConnected=!1,mintedItems=[],currentPrice=0;const CALENDAR_MONTHS=[{month:1,name:"January",days:31},{month:2,name:"February",days:29},{month:3,name:"March",days:31},{month:4,name:"April",days:30},{month:5,name:"May",days:31},{month:6,name:"June",days:30},{month:7,name:"July",days:31},{month:8,name:"August",days:31},{month:9,name:"September",days:30},{month:10,name:"October",days:31},{month:11,name:"November",days:30},{month:12,name:"December",days:31}],INFURA_ENDPOINT="https://mainnet.infura.io/v3/b15848dd8153473a94f197b4b6246825";let contractInfura;const CONTRACT_ADDRESS="0xab53542c6591fb9f7bee187e0bbe214af9e8fbf7";let contract,contractAbi;const selectedDateDiv=document.getElementById("selected-date"),ownerDiv=document.getElementById("owner"),currentPriceField=document.getElementById("price-field"),currentPriceDiv=document.getElementById("current-price"),messageDiv=document.getElementById("message-field"),currentMessageDiv=document.getElementById("current-message"),formBtn=document.getElementById("form-btn"),modal=document.getElementById("calendar-modal"),helpModal=document.getElementById("help-modal");getContractAbi=(async()=>{const e=await fetch("js/TheDates_metadata.json");return(await e.json()).output.abi||[]}),getCalendarItemId=((e,t)=>"calendar-item-"+e+"-"+t),getDaySuffix=(e=>["st","nd","rd"][(((e<0?-e:e)+90)%100-10)%10-1]||"th"),getDatesAlreadyMinted=(async()=>{if(!contractInfura)return;const e=await contractInfura.methods.getDatesAlreadyMinted().call();e&&(mintedItems=e.map(e=>({month:Number(e[0]),day:Number(e[1]),message:e[2],tokenId:Number(e[3]),isOwnable:!1})))}),updateDateStatusBySelectedAccount=(async()=>{if(contractInfura&&selectedAccount)for(let e=0;e<mintedItems.length;e++){const t=await contractInfura.methods.ownerOf(mintedItems[e].tokenId).call();mintedItems[e].isOwnable=t===selectedAccount}}),updateDailyStatus=(()=>{for(let e=0;e<mintedItems.length;e++){let t=document.getElementById(getCalendarItemId(mintedItems[e].month,mintedItems[e].day));t&&(t.classList.remove("border-green"),t.classList.remove("border-yellow"),t.classList.add(mintedItems[e].isOwnable?"border-green":"border-yellow"))}}),renderCalendar=(()=>{let e=document.getElementById("calendar-section");if(e){let t,n,a,o,c,r;for(let s=0;s<CALENDAR_MONTHS.length;s++){s%4==0&&((t=document.createElement("div")).className="row",e.append(t)),(n=document.createElement("div")).className="column",(a=document.createElement("div")).className="month-item",(o=document.createElement("div")).className="month-title",o.innerText=CALENDAR_MONTHS[s].name,a.append(o);for(let e=0;e<CALENDAR_MONTHS[s].days;e++)e%7==0&&((c=document.createElement("div")).className="row",a.append(c)),(r=document.createElement("div")).id=getCalendarItemId(CALENDAR_MONTHS[s].month,e+1),r.className="day-item",r.innerText=(e+1).toString(),r.onclick=(()=>{openModal(CALENDAR_MONTHS[s].month,e+1)}),c.append(r);n.append(a),t.append(n)}}}),validateMessage=(e=>{e&&e.length>128&&tata.error("Error","Please enter a message with up to 128 characters.",{duration:5e3})}),onClaimDate=(async(e,t,n)=>{if(validateMessage(n),isConnected&&contract){try{formBtn.innerText="Claiming...",formBtn.disabled=!0,await contract.methods.mint(e,t,n).send({from:selectedAccount,value:currentPrice}),closeModal(),tata.success("Success","Your NFT has been claimed successfully!",{duration:5e3}),await getDatesAlreadyMinted(),await updateDateStatusBySelectedAccount(),updateDailyStatus()}catch(e){tata.error("Error","There is an error when claiming. Please try again!",{duration:5e3})}formBtn.innerText="Claim",formBtn.disabled=!1}else tata.error("Error","Please sign in with Metamask to claim.",{duration:5e3})}),onUpdateMessage=(async(e,t)=>{if(validateMessage(t),isConnected&&contract){try{formBtn.innerText="Updating...",formBtn.disabled=!0,await contract.methods.setMessage(e,t).send({from:selectedAccount}),closeModal(),tata.success("Success","Your NFT's message has been updated successfully!",{duration:5e3});const n=mintedItems.findIndex(t=>t.tokenId===e);mintedItems[n].message=t}catch(e){tata.error("Error","There is an error when updating message. Please try again!",{duration:5e3})}formBtn.innerText="Update message",formBtn.disabled=!1}else tata.error("Error","Please sign in with Metamask to update.",{duration:5e3})}),openModal=(async(e,t)=>{if(modal&&(modal.style.display="block",contractInfura)){const n=CALENDAR_MONTHS.find(t=>t.month===e);selectedDateDiv.innerText=(n?n.name:"")+" "+t+getDaySuffix(t),messageDiv.style.display="inline",messageDiv.value="",currentMessageDiv.innerText="";const a=mintedItems.find(n=>n.month===e&&n.day===t);if(a){currentPriceField.style.display="none";const e=await contractInfura.methods.ownerOf(a.tokenId).call();ownerDiv.innerText=e?e.toString().substring(0,6)+"..."+e.toString().slice(-4):"",a.isOwnable?(messageDiv.value=a.message,formBtn.innerText="Update message",formBtn.onclick=(()=>{onUpdateMessage(a.tokenId,messageDiv.value)})):(messageDiv.style.display="none",currentMessageDiv.innerText=a.message,formBtn.innerText="Bid on OpenSea",formBtn.onclick=(()=>{const e=`https://opensea.io/assets/${CONTRACT_ADDRESS}/${a.tokenId}`;window.open(e,"_blank")}))}else currentPrice=await contractInfura.methods.getCurrentPrice().call(),ownerDiv.innerText="Available",currentPriceField.style.display="inline",currentPriceDiv.innerText=web3Infura.utils.fromWei(currentPrice,"ether")+" ETH",formBtn.innerText="Claim",formBtn.onclick=(()=>{onClaimDate(e,t,messageDiv.value)})}}),closeModal=(()=>{modal&&(modal.style.display="none")}),toggleHelpModal=(e=>{helpModal&&(helpModal.style.display=e?"block":"none")}),validate=(()=>{window.ethereum||tata.error("Error","We didn't detect any Metamask account connected in your browser. Please install Metamask (https://metamask.io) to see and manage your NFTs.",{duration:1e4})}),onConnect=(async()=>{validate();try{web3Modal.clearCachedProvider(),provider=await web3Modal.connect()}catch(e){return console.error("Could not get a wallet connection",e),void(isConnected=!1)}provider.on("accountsChanged",()=>{fetchAccountData()}),provider.on("chainChanged",()=>{fetchAccountData()}),await fetchAccountData()}),fetchAccountData=(async()=>{web3=new Web3(provider),contract=new web3.eth.Contract(contractAbi,CONTRACT_ADDRESS);const e=await web3.eth.getChainId();document.getElementById("message").innerText=1!==e?"Current network is not supported. Please connect to Ethereum mainnet.":"";const t=await web3.eth.getAccounts();(selectedAccount=t[0]||null)&&(accountBalance=await web3.eth.getBalance(selectedAccount),accountBalance=Number(web3.utils.fromWei(accountBalance,"ether")).toFixed(2)),document.getElementById("btn-connect").style.display=selectedAccount?"none":"inline",document.getElementById("account-info").style.display=selectedAccount?"inline-block":"none",document.getElementById("selected-account").innerText=selectedAccount?selectedAccount.substring(0,6)+"..."+selectedAccount.slice(-4):"",document.getElementById("account-balance").innerText=accountBalance?accountBalance+" ETH":"",(isConnected=!(1!==e||!selectedAccount))&&(await updateDateStatusBySelectedAccount(),updateDailyStatus())}),initialize=(async()=>{contractAbi=await getContractAbi(),web3Modal=new Web3Modal({network:"mainnet",cacheProvider:!1,providerOptions:{}}),web3Infura=new Web3(INFURA_ENDPOINT),(contractInfura=new web3Infura.eth.Contract(contractAbi,CONTRACT_ADDRESS))&&(await getDatesAlreadyMinted(),updateDailyStatus())}),window.onload=(()=>{renderCalendar(),initialize()}),window.onclick=(e=>{e.target==modal?closeModal():e.target==helpModal&&toggleHelpModal(!1)});